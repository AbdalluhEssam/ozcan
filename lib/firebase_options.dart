// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'dart:developer';
import 'dart:io';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:get/get.dart';
import 'package:ozcan/controller/orders/archive_controller.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:convert';
import 'package:firebase_core/firebase_core.dart'
    show Firebase, FirebaseOptions;
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'controller/notification_controller.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyBHLLiEqdEd7q3c-Ef3KCtdFRAyF5keGXw',
    appId: '1:445758985130:web:48d129cca8776f099211d3',
    messagingSenderId: '445758985130',
    projectId: 'ozcan-4075e',
    authDomain: 'ozcan-4075e.firebaseapp.com',
    databaseURL: 'https://ozcan-4075e-default-rtdb.firebaseio.com',
    storageBucket: 'ozcan-4075e.appspot.com',
    measurementId: 'G-EF3HBFHB6C',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAQ4XAT-rlxA7FodVIMYw8z9YcSw4iocUo',
    appId: '1:445758985130:android:9da6ea08a7e452249211d3',
    messagingSenderId: '445758985130',
    projectId: 'ozcan-4075e',
    databaseURL: 'https://ozcan-4075e-default-rtdb.firebaseio.com',
    storageBucket: 'ozcan-4075e.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyBD1E9RoCgevCFPc8wzEG-i6myCwju09t4',
    appId: '1:445758985130:ios:30d4215da61766b09211d3',
    messagingSenderId: '445758985130',
    projectId: 'ozcan-4075e',
    databaseURL: 'https://ozcan-4075e-default-rtdb.firebaseio.com',
    storageBucket: 'ozcan-4075e.appspot.com',
    iosBundleId: 'com.example.ozcan',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyBD1E9RoCgevCFPc8wzEG-i6myCwju09t4',
    appId: '1:445758985130:ios:9ec99172e5c3958a9211d3',
    messagingSenderId: '445758985130',
    projectId: 'ozcan-4075e',
    databaseURL: 'https://ozcan-4075e-default-rtdb.firebaseio.com',
    storageBucket: 'ozcan-4075e.appspot.com',
    iosBundleId: 'com.example.ozcan.RunnerTests',
  );
}

class Utils {
  static formatPrice(double price) => '\$ ${price.toStringAsFixed(2)}';

  static formatDate(DateTime date) => DateFormat.yMd().format(date);
}

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();


Future<void> initFcm() async {
  await Firebase.initializeApp();
  FirebaseMessaging messaging = FirebaseMessaging.instance;

  NotificationSettings settings = await messaging.requestPermission(
    alert: true,
    announcement: false,
    badge: true,
    carPlay: false,
    criticalAlert: false,
    provisional: false,
    sound: true,
  );

  if (settings.authorizationStatus == AuthorizationStatus.authorized) {
    log('User granted permission');
  } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
    log('User granted provisional permission');
  } else {
    log('User declined or has not accepted permission');
  }

  await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(
    alert: true,
    badge: true,
    sound: true,
  );

  var initializationSettingsAndroid =
  const AndroidInitializationSettings('@mipmap/ic_launcher');
  var initializationSettings =
  InitializationSettings(android: initializationSettingsAndroid);
  flutterLocalNotificationsPlugin.initialize(initializationSettings);

  refreshPageNotification(data) {
    if (Get.currentRoute == "/OrdersAll" && data['pagename'] == "OrdersAll") {
      OrdersAllController controller = Get.find();
      controller.refreshOrder();
    }

    if (Get.currentRoute == "/NotificationScreen" && data['pagename'] == "NotificationScreen") {
      NotificationControllerImp controllerImp = Get.find();
      controllerImp.getData();
    }
  }

  Future<String> _downloadAndSaveFile(String url, String fileName) async {
    final Directory? directory = await getExternalStorageDirectory();
    final String filePath = '${directory!.path}/$fileName.png';
    final http.Response response = await http.get(Uri.parse(url));
    final File file = File(filePath);
    await file.writeAsBytes(response.bodyBytes);
    return filePath;
  }

  FirebaseMessaging.onMessage.listen((RemoteMessage? message) async {
    if (message == null) return;

    if (Get.currentRoute == "/ChatsDetailsScreen" && message.data['pagename'] == "ChatsDetailsScreen") {
      // If the current route is ChatsDetailsScreen and the message is intended for ChatsDetailsScreen, do nothing.
      return;
    } else {
      // Call refreshPageNotification with the message data.
      refreshPageNotification(message.data);

      // Show a snackbar notification.
      Get.snackbar(
        "${message.notification?.title}",
        "${message.notification?.body}",
        icon: const Icon(Icons.notifications_active, color: Colors.white),
        barBlur: 2,
        margin: const EdgeInsets.symmetric(horizontal: 0),
        padding: const EdgeInsets.all(15),
        backgroundColor: Colors.blue.withOpacity(0.4), // Use your app's primary color
        isDismissible: true,
        duration: const Duration(seconds: 2),
        colorText: Colors.white,
      );

      RemoteNotification? notification = message.notification;
      AndroidNotification? android = message.notification?.android;
      if (notification != null && android != null) {
        final String largeIconPath = await _downloadAndSaveFile(
          '${message.data['image']}',
          'largeIcon',
        );
        final String bigPicturePath = await _downloadAndSaveFile(
          message.data['image'],
          'bigPicture',
        );

        await flutterLocalNotificationsPlugin.show(
          notification.hashCode,
          notification.title,
          notification.body,
          NotificationDetails(
            android: AndroidNotificationDetails(
              'channel.id',
              'channel.name',
              ongoing: true,
              channelDescription: 'channel.description',
              importance: Importance.max,
              priority: Priority.high,
              largeIcon: FilePathAndroidBitmap(largeIconPath),
              styleInformation: message.data['image'] != null
                  ? BigPictureStyleInformation(
                FilePathAndroidBitmap(bigPicturePath),
                largeIcon: FilePathAndroidBitmap(largeIconPath),
                hideExpandedLargeIcon: false,
                contentTitle: notification.title,
                summaryText: notification.body,
                htmlFormatContent: true,
                htmlFormatSummaryText: true,
              )
                  : DefaultStyleInformation(true, true),
            ),
          ),
          payload: json.encode(message.data),
        );
      }
    }
  });
}

